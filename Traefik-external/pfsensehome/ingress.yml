apiVersion: v1
kind: Namespace
metadata:
  name: pfsensehome
---
apiVersion: v1
kind: Service
metadata:
  name: pfsensehome
  namespace: pfsensehome
spec:
  type: ClusterIP
  ports:
    - name: https
      port: 443
      targetPort: 443
  # no selector â€“ using manual Endpoints
---
apiVersion: v1
kind: Endpoints
metadata:
  name: pfsensehome
  namespace: pfsensehome
subsets:
  - addresses:
      - ip: 192.168.2.254
    ports:
      - name: https
        port: 443
        protocol: TCP
---
# Option A (easy): trust pfSense cert by skipping verification
apiVersion: traefik.io/v1alpha1
kind: ServersTransport
metadata:
  name: pfsensehome-insecure
  namespace: pfsensehome
spec:
  insecureSkipVerify: true

# Option B (preferred): trust pfSense CA instead of skipping verify
# 1) create a secret with your pfSense CA PEM in this namespace:
#    kubectl -n pfsensehome create secret generic pfsense-ca --from-file=ca.crt=/path/to/pfsense-ca.pem
# 2) then use this ServersTransport and reference it in the IngressRoute:
# apiVersion: traefik.io/v1alpha1
# kind: ServersTransport
# metadata:
#   name: pfsensehome-ca
#   namespace: pfsensehome
# spec:
#   rootCAsSecrets:
#     - pfsense-ca
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: default-headers
  namespace: pfsensehome
spec:
  headers:
    browserXssFilter: true
    contentTypeNosniff: true
    forceSTSHeader: true
    stsIncludeSubdomains: true
    stsPreload: true
    stsSeconds: 15552000
    customFrameOptionsValue: SAMEORIGIN
    customRequestHeaders:
      X-Forwarded-Proto: "https"
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: pfsensehome
  namespace: pfsensehome
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`pfsensehome.kbtech.org`) || Host(`www.pfsensehome.kbtech.org`)
      kind: Rule
      middlewares:
        - name: default-headers
      services:
        - name: pfsensehome
          port: 443
          scheme: https
          serversTransport: pfsensehome-insecure   # or: pfsensehome-ca
          passHostHeader: true
  tls:
    secretName: kbtech-tls   # must exist in namespace pfsensehome
